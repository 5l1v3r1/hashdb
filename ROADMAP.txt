Possible features after 1.0.0:
------------------------------------------------------------

Have bulk_extractor hashid scan mode where scanner can populate the database.
This is a good way to really study the problem of non-distinct hashes
on real hard drives.

Introduce another data map for storing file hashes.

Add statistic capability for reporting information such as
how many duplicates there are.

Add interfaces to the query API to allow databases to be
created, iterated, and added to.

Add new option to not pack upon saving.  Add feedback to indicate
when packing starts and stops.

Change query internals to manage lookups in sorted array groups.

Make library completely failure-friendly.  Currently it calls exit() when
files faile and it has Boost code that can throw interprocess_exception.
Tests are in place to prevent these under normal circumstances.
Change this to return integer error codes that the application can test.

Make library quiet.  Currently, the library prints errors.
Change it to return integer error codes that the application can decode.

May optimise the -x command that entirely removes popular hashes.

Add another map to map the repository index to the repository name.
In the future, this map may be part of the metadata.

Truncate long file paths to the right, not the left, else use
variable-length string records.

Maybe shard Bloom filter.

Change zmq to use zmq_msg_t rather than locally allocated buffers.
This allows internal management of arbitrarily long buffers.
Specifically, use zmq_msg_init, zmq_msg_recv, zmq_msg_data, and
zmq_msg_size.  Then get socket working for hashdb_checker --query_source.

Encrypt traffic through zmq socket.

Compile with another compiler, try clang.

------------------------------------------------------------

