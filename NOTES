Note: made changes to xbtree to remove compiler errors/warnings.
This will be replaced with a new version of boost btree in the future.

Note: removed use of iterator_facade because it causes many compiler warnings like this:
warning: base class ‘class boost::iterator_facade<burst_manager_map<md5_t, source_lookup_record_t>::manager_iterator, const std::pair<const md5_t, source_lookup_record_t>, boost::forward_traversal_tag, const std::pair<const md5_t, source_lookup_record_t>&, long int>’ has a non-virtual destructor [-Weffc++]
This change helped ensure efficient usage (prefix increment), reduces the call chain, and allows control over what the compiler generates, specifically, operator= and the copy constructor.

Note: 
Removed the dependency on libtoolize by porting libxml++ to libxml2.  libxml++ requires libtoolize because it requires PKG_CHECK_MODULES, requiring the use of AM_PROG_CC_C_O and requiring makefiles to define program_CPPFLAGS and program_LIBS.  Additional side effects are:

1)  the libtoolize comment libtoolize: `AC_PROG_RANLIB' is rendered obsolete by `LT_INIT'.
2)  all the generated .o files are prefixed with the primary name, which is annoying.
3)  Makefiles that need libxml++ require the lines:
          hashdb_CPPFLAGS = $(LIBXMLXX_CFLAGS) $(AM_CPPFLAGS)
          hashdb_LDFLAGS = $(LIBXMLXX_LIBS)
     which makes it so I can't readily compile with flag -lsystem for libxml++, which would make all those libxml++ warnings go away.

Here are some ramifications of this effort:
hashdb_settings_t now includes hashdigest_type.

When parsing DFXML, hashdigest_type and chunk_size are passed to hashdb_manager.
This way, hashdb_manager can manage all checking and report all failures at the same place.

There were 3 similar DFXML parsers because the action is embedded in the parser:
  Add hash
  remove hash
  hashdb lookup

Now, the action is still embedded, but a consumer callback is used with a Template so there is only one DFXML scanner for all three.

Also, the XML settings parser has been ported to use libxml2, not libxml++.


xbtree modified for Windows port: include winsock2.h before windows.h
to avoid winsock2.h warning.

------------------------------------------------------------
Windows Port:
zmq for mingw is not static, so don't compile with --enable-static --disable-shared.

Later, may change zmq to static.  A code change recommendation is provided at
http://comments.gmane.org/gmane.network.zeromq.devel/17178

In configure.ac, changed boost to use macro boost.m4
because macros ax_boost_base.m4, ax_boost_system.m4, ax_boost_filesystem.m4
failed to work with mingw.  Specifically, ax_boost_system.m4 failed
with "Could not find a version of the library!".

------------------------------------------------------------
Issues with scan_hashid:

--------------------
(1)
These files moved from be13_api to dfxml/src:
    md5.c
    md5.h
    xml.c
    xml.h

The bulk_extractor git archive needs updated to include the dfxml package.
File bulk_extractor/src/Makefile needs to be changed so that these files
are found in dfxml/src instead of in be13_api.


--------------------
2)
I introduced HAVE_HASHID as the switch for generating the hashid scanner
and including the libhashdb library.  This impacts configure.ac
by adding libraries and the Boost library.  This implementation currently is
sloppy and I need to clean it up.

--------------------
3)
<resolved>.
--------------------
4)
<resolved>.

--------------------
5)
I changed usage of "#include <config.h>" to be in .c files and to never be 
in .h files.  I did this because it is inappropriate to have
"#include <config.h>" inside library header files.  In some cases, header
files require definitions that "#include <config.h>" would have provided,
such as WIN32.  The result is that the program including the library is
responsible for providing any definitions that the library needs.

--------------------
6)
When these issues get settled, I will want to push bulk_extractor changes
to github.  Currently I am archiving relavent files in SVN under sectorid2.


------------------------------------------------------------
Change in hashdb interface usage

Here is a kind of pseudocode view of current hashdb interfaces:

For hash lookup request, a vector of {hash id, hash digest} pairs is provided:
  hashes_request {
    vector<{id, digest}>
  }

For hash lookup response, a structure containing chunk size and a vector of {hash id, hash digest, duplicates count, lookup index, chunk offset} is returned:
  hashes_response {
    chunk_size;
    vector<{id, digest, count, lookup_index, chunk_offset}>
  }

I like the request and response structures except for the use of variable "chunk_size".  I provide "chunk_size" so the user can validate that the chunk size the user expects and the chunk size the database uses match.  The test should be hidden, but the library doesn't know the chunk size the user is using.  I don't want to pass in chunk_size during instantiation because the reason is obscure.  Also, testing on chunk size alone does not cover potential future checks.

I resolved this by removing the check.  The use must check the xml returned by "get_hashdb_info" interface to determine the chunk_size.

